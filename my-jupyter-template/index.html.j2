{%- extends 'base.html.j2' -%}
{% from 'mathjax.html.j2' import mathjax %}
{% from 'jupyter_widgets.html.j2' import jupyter_widgets %}

{%- block header -%}
<!DOCTYPE html>
<html>
<head>
{%- block html_head -%}
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0">
{% set nb_title = nb.metadata.get('title', resources['metadata']['name']) | escape_html_keep_quotes %}
<title>{{nb_title}}</title>

{%- block html_head_js -%}
{%- block html_head_js_requirejs -%}
<script src="{{ resources.require_js_url }}"></script>
{%- endblock html_head_js_requirejs -%}
{%- endblock html_head_js -%}

{% block jupyter_widgets %}
  {%- if "widgets" in nb.metadata -%}
    {{ jupyter_widgets(resources.jupyter_widgets_base_url, resources.html_manager_semver_range, resources.widget_renderer_url) }}
  {%- endif -%}
{% endblock jupyter_widgets %}

{% block extra_css %}
{% endblock extra_css %}

{% for css in resources.inlining.css -%}
  <style type="text/css">
    {{ css }}
  </style>
{% endfor %}

{% block notebook_css %}
{{ resources.include_css("static/index.css") }}
{% if resources.theme == 'dark' %}
    {{ resources.include_css("static/theme-dark.css") }}
{% elif resources.theme == 'light'  %}
    {{ resources.include_css("static/theme-light.css") }}
{% else %}
    {{ resources.include_lab_theme(resources.theme) }}
{% endif %}
<style type="text/css">
/* Force rendering true colors when outputing to pdf */
* {
  -webkit-print-color-adjust: exact;
}

/* Misc */
a.anchor-link {
  display: none;
}

/* Input area styling */
.jp-InputArea {
  overflow: hidden;
}

.jp-InputArea-editor {
  overflow: hidden;
}

.CodeMirror.cm-s-jupyter .highlight pre {
/* weird, but --jp-code-padding defined to be 5px but 4px horizontal padding is hardcoded for pre.CodeMirror-line */
  padding: var(--jp-code-padding) 4px;
  margin: 0;

  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  color: inherit;

}

.jp-OutputArea-output pre {
  line-height: inherit;
  font-family: inherit;
}

.jp-RenderedText pre {
  color: var(--jp-content-font-color1);
  font-size: var(--jp-code-font-size);
}

/* Using table instead of flexbox so that we can use break-inside property */
/* CSS rules under this comment should not be required anymore after we move to the JupyterLab 4.0 CSS */


.jp-CodeCell.jp-mod-outputsScrolled .jp-OutputArea-prompt {
  min-width: calc(
    var(--jp-cell-prompt-width) - var(--jp-private-cell-scrolling-output-offset)
  );
}

.jp-OutputArea-child {
  display: table;
  width: 100%;
}

.jp-OutputPrompt {
  display: table-cell;
  vertical-align: top;
  min-width: var(--jp-cell-prompt-width);
}

body[data-format='mobile'] .jp-OutputPrompt {
  display: table-row;
}

.jp-OutputArea-output {
  display: table-cell;
  width: 100%;
}

body[data-format='mobile'] .jp-OutputArea-child .jp-OutputArea-output {
  display: table-row;
}

.jp-OutputArea-output.jp-OutputArea-executeResult {
  width: 100%;
}

/* Hiding the collapser by default */
.jp-Collapser {
  display: none;
}

@page {
    margin: 0.5in; /* Margin for each printed piece of paper */
}

@media print {
  .jp-Cell-inputWrapper,
  .jp-Cell-outputWrapper {
    display: block;
  }

  .jp-OutputArea-child {
    break-inside: avoid-page;
  }
}
</style>

{% endblock notebook_css %}

{%- block html_head_js_mathjax -%}
{{ mathjax(resources.mathjax_url) }}
{%- endblock html_head_js_mathjax -%}

{%- block html_head_css -%}
{%- endblock html_head_css -%}

<style>
body {
  width: 800px;
  margin-left: auto;
  margin-right: auto;
}
</style>

<script>
function hidePrompts() {
    var inputPrompts = document.querySelectorAll('.jp-InputPrompt');
    for (var i = 0; i < inputPrompts.length; i++) {
        inputPrompts[i].style.visibility = 'hidden';
    }
    var inputPrompts = document.querySelectorAll('.jp-OutputPrompt');
    for (var i = 0; i < inputPrompts.length; i++) {
        inputPrompts[i].style.visibility = 'hidden';
    }
}

function toggle_visibility(a) {
    preElement = a.cell.querySelector('pre');
    if ( !a.toggle ) {
        a.toggle = true;
        // hide cell
        preElement.innerHTML = a.short_pre;
        // a.cell.style.visibility='hidden';
        // a.cell.style.position='absolute';
        a.innerHTML = '[show code]';
    } else {
        a.toggle = false;
        // show cell
        preElement.innerHTML = a.full_pre;
        // a.cell.style.visibility='visible';
        // a.cell.style.position='';
        a.innerHTML = '[hide code]';
    }
}

function add_toggle(cell) {
       var a = document.createElement('A');
       a.href='#'
       a.cell = cell;
       a.setAttribute( 'onclick', "toggle_visibility(this); return false;" );
       var div = document.createElement('DIV');
       div.style.textAlign = 'right';
       div.appendChild(a);
       cell.after(div);
       var preElement = cell.querySelector('.jp-InputArea pre');
       a.full_pre = preElement.innerHTML
       a.short_pre = preElement.innerHTML.split('\n').slice(0, 1).join('\n');
       toggle_visibility(a);
}

function clear_cx_lines(cell) {
    // Clear lines with "@CX"
    var inputArea = cell.querySelector('.jp-InputArea');
    var preElement = inputArea.querySelector('pre');
    if (preElement && preElement.innerHTML.includes('@CX')) {
        var lines = preElement.innerHTML.split('\n');
        var filteredLines = lines.filter(line => !line.includes('@CX'));
        preElement.innerHTML = filteredLines.join('\n');
        return;
    }
}

function refresh_cell(cell) {
    if( cell.refreshed ) return;
    cell.refreshed = true;

    if( !cell.classList.contains('jp-CodeCell')) return;

    var inputArea = cell.querySelector('.jp-InputArea');
    var inputText = inputArea.innerText;
    if ( inputText.indexOf('@CX-HIDE') >= 0 ) {
        clear_cx_lines(cell);
        cell.style.display = 'none';
    } else if ( inputText.indexOf('@CX-TOGGLE') >= 0 ) {
        clear_cx_lines(cell);
        add_toggle(cell);
    }
}

function refresh() {
    var cells = document.querySelectorAll('.jp-Cell')
    cells.forEach(cell => {
       refresh_cell(cell);
    });
}

document.addEventListener("DOMContentLoaded", function(event) {
    refresh();
    hidePrompts();
});

</script>

{%- endblock html_head -%}
</head>
{%- endblock header -%}

{%- block body_header -%}
{% if resources.theme == 'dark' %}
<body class="jp-Notebook" data-jp-theme-light="false" data-jp-theme-name="JupyterLab Dark">
{% else %}
<body class="jp-Notebook" data-jp-theme-light="true" data-jp-theme-name="JupyterLab Light">
{% endif %}
{%- endblock body_header -%}

{% block body_footer %}
</body>
{% endblock body_footer %}

{% block footer %}
{% block footer_js %}
{% endblock footer_js %}
{{ super() }}
</html>
{% endblock footer %}
